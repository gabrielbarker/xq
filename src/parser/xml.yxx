%skeleton "lalr1.cc"
%require  "3.2"

%code requires{
  namespace yy {
    class Lexer;
  }

  #include "../include/XML.hpp"
}

%locations
%define parse.trace

%parse-param { yy::Lexer& lexer }
%parse-param { XML::Tag** root }

%code{
    #include "../include/parser/xml.yy.h"
    #undef yylex
    #define yylex lexer.yylex
}

%union {
    char* str;
    XML::Tag* node;
    XML::Children* children;
    XML::Attributes* attributes;
}

%token <str> WORD WORDS STRING
%token LANGLE RANGLE SLASH EQ

%type <node> program tag 
%type <children> tags
%type <str> open close
%type <attributes> attributes


%%

program: tag  { *root = $1; } ;

tag: open attributes RANGLE WORD close { 
    $$ = new XML::Tag(); 
    $$->setName($1); 
    $$->setAttributes($2->map());
    $$->setValue($4);
  }
   | open attributes RANGLE WORDS close { 
    $$ = new XML::Tag(); 
    $$->setName($1); 
    $$->setAttributes($2->map());
    $$->setValue($4); 
  }
   | open attributes RANGLE tags close { 
    $$ = new XML::Tag(); 
    $$->setName($1); 
    $$->setAttributes($2->map());
    $$->setChildren($4->tags()); 
  }
   ;

tags: tags tag { $$ = $1; $1->add($2); }
    | { $$ = new XML::Children(); }
    ;

open: LANGLE WORD { $$ = $2; };

attributes: attributes WORD EQ STRING { $$ = $1; $$->set($2, $4); }
          | { $$ = new XML::Attributes(); }
          ;

close: LANGLE SLASH WORD RANGLE { $$ = $3; };

%%

void yy::parser::error(const location_type& loc, const std::string& msg)
{
  std::cout << "error message" << std::endl;
  std::cout << msg << std::endl;
}